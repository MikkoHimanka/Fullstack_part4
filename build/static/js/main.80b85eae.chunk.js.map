{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","intitialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCIjCK,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKJ,UAAU,SAASI,I,gBCUjB,EAfA,WAEb,OADgBC,IAAMC,IAHR,cAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,8NCV3C,IAwFeK,EAxFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAKdC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GACJT,EAASS,QAEV,IAEL,IAAMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAhC,GAAI,OAAIA,EAAKG,aAExB8B,EAAqB,SAAAjB,GACzB,IAAMhB,EAAOoB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEnB,KAAOA,KAChCoB,E,yVAAW,IAAQpC,EAAR,CAAcG,WAAYH,EAAKG,YAEhD0B,EACUb,EAAIoB,GACXzB,MAAK,SAAA0B,GACJhB,EAASD,EAAMkB,KAAI,SAAAtC,GAAI,OAAIA,EAAKgB,KAAOA,EAAKhB,EAAOqC,SAEpDE,OAAM,SAAAC,GACLb,EAAgB,aAAD,OACA3B,EAAKK,QADL,sCAGfoC,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAEnB,KAAOA,UAiC1C,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAcR,QAASkB,IAEvB,6BACE,4BAAQpB,QAAS,kBAAMmB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAxCeO,EAAYO,KAAI,SAAAtC,GAAI,OACnC,kBAAC,EAAD,CACE0C,IAAK1C,EAAKgB,GACVhB,KAAMA,EACNC,iBAAkB,kBAAMgC,EAAmBjC,EAAKgB,WAuClD,0BAAM2B,SAnCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBzC,QAASiB,EACTyB,KAAM,IAAIC,KACV7C,UAAW8C,KAAKC,SAAW,IAG7BrB,EACUiB,GACPnC,MAAK,SAAA0B,GACJhB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,SAwBX,2BAAO6B,MAAO9B,EAAS+B,SApBJ,SAACT,GAExBrB,EAAWqB,EAAMU,OAAOF,UAmBpB,4BAAQG,KAAK,UAAb,W,MClFVC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.80b85eae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content} \r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">{message}</div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport noteService from './services/notes'\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    useEffect(() => {\r\n      noteService\r\n        .getAll()\r\n        .then(intitialNotes => {\r\n          setNotes(intitialNotes)\r\n        })\r\n      }, [])\r\n\r\n    const notesToShow = showAll\r\n      ? notes\r\n      : notes.filter(note => note.important)\r\n\r\n    const toggleImportanceOf = id => {\r\n      const note = notes.find(n => n.id === id)\r\n      const changedNote = { ...note, important: !note.important }\r\n\r\n      noteService\r\n        .update(id, changedNote)\r\n        .then(returnedNote => {\r\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n        })\r\n        .catch(error => {\r\n          setErrorMessage(\r\n            `the note '${note.content}' was already deleted form server`\r\n          )\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000);\r\n          setNotes(notes.filter(n => n.id !== id))\r\n        })\r\n    }\r\n\r\n    const rows = () => notesToShow.map(note =>\r\n        <Note\r\n          key={note.id}\r\n          note={note}\r\n          toggleImportance={() => toggleImportanceOf(note.id)}\r\n        />\r\n    )\r\n\r\n    const addNote = (event) => {\r\n      event.preventDefault()\r\n      const noteObject = {\r\n        content: newNote,\r\n        date: new Date(),\r\n        important: Math.random() > 0.5,\r\n      }\r\n      \r\n      noteService\r\n        .create(noteObject)\r\n        .then(returnedNote => {\r\n          setNotes(notes.concat(returnedNote))\r\n          setNewNote('')\r\n        })\r\n    }\r\n  \r\n    const handleNoteChange = (event) => {\r\n      //console.log(event.target.value)\r\n      setNewNote(event.target.value)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Notes</h1>\r\n\r\n        <Notification message={errorMessage} />\r\n\r\n        <div>\r\n          <button onClick={() => setShowAll(!showAll)}>\r\n            show {showAll ? 'important' : 'all'}\r\n          </button>\r\n        </div>\r\n        <ul>\r\n          {rows()}\r\n        </ul>\r\n        <form onSubmit={addNote}>\r\n          <input value={newNote} onChange={handleNoteChange} />\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}